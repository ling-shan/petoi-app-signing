name: Sign, Notarize and Package Petoi Desktop App

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App name in DMG (e.g., Petoi Desktop App.app)'
        required: true
        default: 'Petoi Desktop App.app'
      app_version:
        description: 'App version (used in DMG filename)'
        required: true
        default: '1.2.5'

jobs:
  build-and-package:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Unzip Application
        run: unzip mac/Petoi\ Desktop\ App.zip -d mac/

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Import Developer Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MAC_CERTIFICATE_DATA }}
          p12-password: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
      
      - name: Verify Installer Certificate
        run: |
          # 检查是否包含有效的 Developer ID Application 证书（重点确认）
          security find-identity -v | grep "Developer ID Application: Petoi LLC (H98JHTT3JH)"
          if [ $? -ne 0 ]; then
            echo "Error: 未找到有效的签名证书"
            exit 1
          fi
      
      - name: Code Sign the Application (含嵌套组件深度签名)
        run: |
          set -ex
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          echo "Signing application at path: $APP_PATH"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: Application not found at path $APP_PATH"
            exit 1
          fi

          # 关键：先单独签名嵌套的可执行文件（解决--deep可能遗漏的问题）
          # 1. 签名所有.dylib动态库
          ls -la "$APP_PATH"
          find "$APP_PATH" -name "*.dylib" -type f -exec \
            codesign --force --timestamp -o runtime \
            --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" {} \;
          
          # 2. 签名MacOS目录下的python等可执行文件
          ls -la "$APP_PATH"
          find "$APP_PATH/Contents/MacOS" -type f -perm +x -exec \
            codesign --force --timestamp -o runtime \
            --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" {} \;
          
          # 3. 最终签名整个.app（--deep确保覆盖所有剩余组件）
          ls -la "$APP_PATH"
          codesign --force --deep --strict --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
            --options runtime \
            --timestamp "$APP_PATH"
          
          # 严格验证签名完整性（任何组件无效都会报错终止工作流）
          echo "Verifying complete signature chain..."
          ls -la "$APP_PATH"
          codesign --verify --deep --strict --verbose=2 "$APP_ABS_PATH"

      - name: Verify All Nested Components (关键验证步骤)
        run: |
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          echo "验证所有嵌套组件的签名状态..."
          
          # 查找所有可执行文件和.dylib，逐个验证（确保无遗漏）
          find "$APP_PATH" \( -name "*.dylib" -o -perm +x \) -type f | while read -r file; do
            echo "检查文件: $file"
            codesign --verify --verbose=1 "$file"
            if [ $? -ne 0 ]; then
              echo "❌ 签名验证失败: $file"
              exit 1  # 一旦发现无效签名，立即终止工作流
            fi
          done
          echo "✅ 所有嵌套组件签名验证通过"

      - name: Create DMG with Custom Background
        run: |
          mkdir -p dist/dmg
          cp -R "mac/${{ github.event.inputs.app_name }}" dist/dmg/
          ln -s /Applications dist/dmg/Applications
          
          create-dmg \
            --volname "Petoi Desktop App" \
            --background "mac/Make_for_dmg.jpg" \
            --window-pos 400 200 \
            --window-size 940 580 \
            --icon-size 100 \
            --icon "${{ github.event.inputs.app_name }}" 180 200 \
            --app-drop-link 420 200 \
            --no-internet-enable \
            "dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg" \
            "dist/dmg/"

      # 注意：DMG本身无需签名（苹果公证只验证内部内容），移除多余的DMG签名步骤
      # - name: Sign the DMG
      #   run: ...

      - name: Notarize the DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          DMG_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg"
          echo "Submitting DMG for notarization: $DMG_PATH"
          
          # 提交公证并等待结果（--wait确保工作流等待公证完成）
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PWD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --verbose
          
          # 附加公证票据（离线验证用）
          xcrun stapler staple "$DMG_PATH"
          
          # 验证公证结果
          xcrun stapler validate "$DMG_PATH"

      - name: Upload Signed DMG
        uses: actions/upload-artifact@v4
        with:
          name: Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg
          path: dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg
          retention-days: 30