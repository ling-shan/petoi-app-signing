name: Sign, Notarize and Package Petoi Desktop App

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App name in DMG'
        required: true
        default: 'Petoi Desktop App.app'
      app_version:
        description: 'App version'
        required: true
        default: '1.2.5'

jobs:
  build-and-package:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Unzip Application
        run: unzip mac/Petoi\ Desktop\ App.zip -d mac/

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Import Developer Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MAC_CERTIFICATE_DATA }}
          p12-password: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
      
      - name: Verify Installer Certificate
        run: |
          security find-identity -v | grep "Developer ID Application: Petoi LLC (H98JHTT3JH)" || {
            echo "Error: 未找到有效的签名证书"
            exit 1
          }

      - name: Code Sign .app
        run: |
          set -ex
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          RESOURCES_PATH="$APP_PATH/Contents/Resources"
          PYTHON_EXE_PATH="$APP_PATH/Contents/MacOS/python"
          PYTHON_ZIP_ABSOLUTE="$(cd "$(dirname "$RESOURCES_PATH/lib/python37.zip")" && pwd)/$(basename "$RESOURCES_PATH/lib/python37.zip")"
          ESPTOOL_PATH="$RESOURCES_PATH/resources/esptoolMac/esptool"

          # 签名Python可执行文件
          if [ -f "$PYTHON_EXE_PATH" ]; then
            echo "签名Python可执行文件: $PYTHON_EXE_PATH"
            codesign --force --timestamp --options runtime \
              --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
              "$PYTHON_EXE_PATH"
          else
            echo "Error: 未找到Python可执行文件: $PYTHON_EXE_PATH"
            exit 1
          fi

          # 处理python37.zip内的.dylib文件
          if [ -f "$PYTHON_ZIP_ABSOLUTE" ]; then
            echo "处理压缩包: $PYTHON_ZIP_ABSOLUTE"
            TEMP_UNZIP=$(mktemp -d)
            unzip -q "$PYTHON_ZIP_ABSOLUTE" -d "$TEMP_UNZIP"
            
            find "$TEMP_UNZIP" -name "*.dylib" -type f -exec \
              codesign --force --timestamp --options runtime \
              --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" {} \;
            
            rm -f "$PYTHON_ZIP_ABSOLUTE"
            cd "$TEMP_UNZIP" && zip -q -r "$PYTHON_ZIP_ABSOLUTE" ./*
            cd -
            rm -rf "$TEMP_UNZIP"
          else
            echo "Error: 未找到python37.zip: $PYTHON_ZIP_ABSOLUTE"
            exit 1
          fi

          # 签名esptool
          if [ -f "$ESPTOOL_PATH" ]; then
            echo "签名esptool: $ESPTOOL_PATH"
            codesign --force --timestamp --options runtime \
              --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
              "$ESPTOOL_PATH"
          else
            echo "Error: 未找到esptool: $ESPTOOL_PATH"
            exit 1
          fi

          # 常规签名所有相关文件
          find "$APP_PATH" -type f \( \
            -name "*.dylib" -o -name "*.so" -o -perm +x \
          \) -print0 | while IFS= read -r -d '' file; do
            if [[ "$file" != "$PYTHON_ZIP_ABSOLUTE" ]]; then
              echo "签名文件: $file"
              codesign --force --timestamp --options runtime \
                --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
                "$file"
            fi
          done

          # 最终签名整个.app
          codesign --force --deep --strict --options runtime \
            --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
            --timestamp "$APP_PATH"

      - name: Verify .app Signatures
        run: |
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          RESOURCES_PATH="$APP_PATH/Contents/Resources"
          PYTHON_ZIP_ABSOLUTE="$(cd "$(dirname "$RESOURCES_PATH/lib/python37.zip")" && pwd)/$(basename "$RESOURCES_PATH/lib/python37.zip")"
          ESPTOOL_PATH="$RESOURCES_PATH/resources/esptoolMac/esptool"

          # 验证zip内文件
          if [ -f "$PYTHON_ZIP_ABSOLUTE" ]; then
            TEMP_VERIFY=$(mktemp -d)
            unzip -q "$PYTHON_ZIP_ABSOLUTE" -d "$TEMP_VERIFY"
            find "$TEMP_VERIFY" -name "*.dylib" -type f | while read -r file; do
              echo "验证zip内文件: $file"
              codesign --verify --verbose=1 "$file" || {
                echo "❌ 签名失败: $file"
                exit 1
              }
            done
            rm -rf "$TEMP_VERIFY"
          else
            echo "Error: 验证时未找到python37.zip"
            exit 1
          fi

          # 验证esptool和.app
          codesign --verify --verbose=1 "$ESPTOOL_PATH" || { echo "❌ esptool签名失败"; exit 1; }
          codesign --verify --deep --verbose=4 "$APP_PATH" || { echo "❌ .app签名失败"; exit 1; }
          echo "✅ 所有.app签名验证通过"

      - name: Create ZIP for Notarization
        run: |
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          ZIP_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}_notarize.zip"
          mkdir -p dist
          # 打包.app为ZIP（仅用于公证，不分发）
          zip -q -r "$ZIP_PATH" "$APP_PATH"
          echo "✅ 生成公证用ZIP: $ZIP_PATH"

      - name: Notarize with ZIP
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          ZIP_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}_notarize.zip"
          APP_PATH="mac/${{ github.event.inputs.app_name }}"

          # 提交ZIP到苹果公证
          SUBMISSION_OUTPUT=$(xcrun notarytool submit "$ZIP_PATH" \
            --apple-id "$APPLE_ID" --password "$APPLE_ID_PWD" \
            --team-id "$APPLE_TEAM_ID" --wait --verbose 2>&1)
          echo "$SUBMISSION_OUTPUT"

          # 检查公证结果
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep -oE 'id: [0-9a-f-]+' | cut -d' ' -f2 | head -n1)
          if [ -n "$SUBMISSION_ID" ]; then
            echo "=== 公证日志 ==="
            xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" --password "$APPLE_ID_PWD" --team-id "$APPLE_TEAM_ID"
          fi

          if ! echo "$SUBMISSION_OUTPUT" | grep -q "status: Accepted"; then
            echo "❌ 公证失败"
            exit 1
          fi
          echo "✅ 公证通过"

      - name: Staple Ticket to .app
        run: |
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          # 对.app附加公证票据
          xcrun stapler staple "$APP_PATH"
          # 验证票据
          xcrun stapler validate "$APP_PATH" || { echo "❌ .app票据附加失败"; exit 1; }
          echo "✅ .app票据附加成功"

      - name: Create Final DMG (for Distribution)
        run: |
          APP_NAME="${{ github.event.inputs.app_name }}"
          APP_PATH="mac/$APP_NAME"
          DMG_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg"
          mkdir -p dist/dmg_final

          # 复制带票据的.app到DMG源目录
          cp -R "$APP_PATH" dist/dmg_final/
          # 清理可能残留的旧链接，创建Applications快捷方式
          rm -f dist/dmg_final/Applications
          ln -s /Applications dist/dmg_final/Applications

          # 生成最终分发用DMG
          create-dmg \
            --volname "Petoi Desktop App" \
            --background "mac/Make_for_dmg.jpg" \
            --window-pos 400 200 \
            --window-size 940 580 \
            --icon-size 100 \
            --icon "$APP_NAME" 180 200 \
            --app-drop-link 420 200 \
            --no-internet-enable \
            "$DMG_PATH" \
            "dist/dmg_final/"
          echo "✅ 生成最终DMG: $DMG_PATH"

      - name: Sign Final DMG
        run: |
          DMG_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg"
          # 对最终分发的DMG签名（关键步骤，确保用户能通过Gatekeeper）
          codesign --force --timestamp --options runtime \
            --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
            "$DMG_PATH"
          # 验证DMG签名
          codesign --verify --verbose=1 "$DMG_PATH" || {
            echo "❌ 最终DMG签名失败"
            exit 1
          }
          echo "✅ 最终DMG签名验证通过"

      - name: Final Verification
        run: |
          set -e
          DMG_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg"
          APP_NAME="${{ github.event.inputs.app_name }}"
          TEMP_MOUNT=$(mktemp -d)

          # 挂载最终DMG验证
          hdiutil attach "$DMG_PATH" -mountpoint "$TEMP_MOUNT" -nobrowse -quiet

          # 验证.app票据和签名
          xcrun stapler validate "$TEMP_MOUNT/$APP_NAME" || { echo "❌ .app票据无效"; exit 1; }
          codesign --verify --deep --verbose=1 "$TEMP_MOUNT/$APP_NAME" || { echo "❌ .app签名无效"; exit 1; }

          # 验证DMG签名
          codesign --verify --verbose=1 "$DMG_PATH" || { echo "❌ DMG签名无效"; exit 1; }

          hdiutil detach "$TEMP_MOUNT" -quiet
          echo "✅ 所有最终验证通过"

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg
          path: dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg
          retention-days: 30