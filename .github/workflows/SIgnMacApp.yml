name: Sign, Notarize and Package Petoi Desktop App

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App name in DMG (e.g., Petoi Desktop App.app)'
        required: true
        default: 'Petoi Desktop App.app'
      app_version:
        description: 'App version (used in DMG filename)'
        required: true
        default: '1.2.5'

jobs:
  build-and-package:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Unzip Application
        run: unzip mac/Petoi\ Desktop\ App.zip -d mac/

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Import Developer Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MAC_CERTIFICATE_DATA }}
          p12-password: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
      
      - name: Verify Installer Certificate
        run: |
          security find-identity -v | grep "Developer ID Application: Petoi LLC (H98JHTT3JH)"
          if [ $? -ne 0 ]; then
            echo "Error: 未找到有效的签名证书"
            exit 1
          fi
      
      - name: Code Sign the Application (核心：先签名.app)
        run: |
          set -ex
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: Application not found at $APP_PATH"
            exit 1
          fi

          # 1. 签名所有动态库和可执行文件（确保嵌套组件完整）
          find "$APP_PATH" \( -name "*.dylib" -o -perm +x \) -type f -exec \
            codesign --force --timestamp -o runtime \
            --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" {} \;
          
          # 2. 整体签名.app（确认完整签名链）
          codesign --force --deep --strict --sign "Developer ID Application: Petoi LLC (H98JHTT3JH)" \
            --options runtime \
            --timestamp "$APP_PATH"

      - name: Verify .app Signature (确保签名有效)
        run: |
          APP_PATH="mac/${{ github.event.inputs.app_name }}"
          codesign --verify --deep --verbose=4 "$APP_PATH"
          spctl --assess --type execute --verbose "$APP_PATH"  # 临时验证.app签名状态

      - name: Create DMG (打包分发载体)
        run: |
          mkdir -p dist/dmg
          cp -R "mac/${{ github.event.inputs.app_name }}" dist/dmg/
          ln -s /Applications dist/dmg/Applications
          
          create-dmg \
            --volname "Petoi Desktop App" \
            --background "mac/Make_for_dmg.jpg" \
            --window-pos 400 200 \
            --window-size 940 580 \
            --icon-size 100 \
            --icon "${{ github.event.inputs.app_name }}" 180 200 \
            --app-drop-link 420 200 \
            --no-internet-enable \
            "dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg" \
            "dist/dmg/"

      - name: Notarize the DMG (规范：公证分发载体)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          DMG_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg"
          echo "Submitting DMG for notarization: $DMG_PATH"
          
          # 对.dmg公证（无需--force，符合苹果默认格式）
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PWD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --verbose
          
          # 装订凭证到.dmg（用户挂载时会自动识别内部.app的公证状态）
          xcrun stapler staple "$DMG_PATH"
          
          # 验证公证结果
          xcrun stapler validate "$DMG_PATH"

      - name: Final Verification (确认最终分发包有效)
        run: |
          DMG_PATH="dist/Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg"
          MOUNT_POINT=$(hdiutil mount "$DMG_PATH" | grep -o '/Volumes/[^ ]*' | head -n 1)
          
          # 验证DMG中的.app是否通过Gatekeeper
          APP_IN_DMG="$MOUNT_POINT/${{ github.event.inputs.app_name }}"
          spctl --assess --type execute --verbose "$APP_IN_DMG"  # 应显示"accepted"
          
          hdiutil unmount "$MOUNT_POINT"

      - name: Upload Signed DMG
        uses: actions/upload-artifact@v4
        with:
          name: Petoi_Desktop_App_${{ github.event.inputs.app_version }}.dmg
          path: ${{ env.DMG_PATH }}
          retention-days: 30
